
import logging
import os
import mimetypes
import re
import time
import csv
import hashlib
from pathlib import Path
from telegram import (
    InlineKeyboardButton, InlineKeyboardMarkup, Update, InputFile
)
from telegram.ext import (
    Application, CallbackQueryHandler, CommandHandler,
    ConversationHandler, ContextTypes, MessageHandler, filters
)
from docx import Document
import PyPDF2
from dotenv import load_dotenv

CHOOSING, CHECK_DOCUMENT, VERIFY_PAYMENT = range(3)

TERMS_PATH = "terms.pdf"
LOG_FILE = "logs.csv"
CHECKS_DB_DIR = "unique_checks"

Path(CHECKS_DB_DIR).mkdir(exist_ok=True)
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
OWNER_ID = int(os.getenv("OWNER_ID"))

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)
user_docs = {}

RULES_TEXT = (
    "üîπ –ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ –∏ –ø—Ä–∏–º–∏—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞:\n"
    "–ù–∞–∂–∏–º–∞—é –Ω–∞ –∫–Ω–æ–ø–∫—É –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏.\n\n"
    "üìé –°–∫–∞—á–∞–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∏–∂–µ."
)

def hash_file(file_path: str) -> str:
    hasher = hashlib.sha256()
    with open(file_path, "rb") as f:
        for chunk in iter(lambda: f.read(4096), b""):
            hasher.update(chunk)
    return hasher.hexdigest()

def is_new_check(file_path: str) -> bool:
    file_hash = hash_file(file_path)
    db_file = os.path.join(CHECKS_DB_DIR, file_hash)
    if os.path.exists(db_file):
        return False
    Path(db_file).touch()
    return True

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    keyboard = [
        [InlineKeyboardButton("üì• –°–∫–∞—á–∞—Ç—å —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ", callback_data="download_terms")],
        [InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data="accept_rules")]
    ]
    await (update.message or update.effective_message).reply_text(RULES_TEXT, reply_markup=InlineKeyboardMarkup(keyboard))
    return CHOOSING

async def send_terms_file(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    if os.path.exists(TERMS_PATH):
        with open(TERMS_PATH, "rb") as f:
            await query.message.reply_document(InputFile(f, filename="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ_—Å–æ–≥–ª–∞—à–µ–Ω–∏–µ.pdf"))
    else:
        await query.message.reply_text("‚ùå –§–∞–π–ª —Å–æ–≥–ª–∞—à–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω.")

async def accept_rules(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    keyboard = [[InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç", callback_data="check_doc")]]
    await query.edit_message_text("‚úÖ –ü—Ä–∞–≤–∏–ª–∞ –ø—Ä–∏–Ω—è—Ç—ã. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=InlineKeyboardMarkup(keyboard))
    return CHOOSING

async def choose_check_document(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("üìÑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏!.")
    return CHECK_DOCUMENT

def is_supported_file_type(mime_type: str) -> bool:
    return mime_type in [
        "application/pdf",
        "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
        "text/plain"
    ]

def extract_text(file_path: str, mime_type: str) -> str:
    if mime_type == "application/pdf":
        with open(file_path, "rb") as f:
            reader = PyPDF2.PdfReader(f)
            return "\n".join(page.extract_text() or "" for page in reader.pages)
    elif mime_type == "application/vnd.openxmlformats-officedocument.wordprocessingml.document":
        doc = Document(file_path)
        return "\n".join(p.text for p in doc.paragraphs)
    else:
        with open(file_path, "r", encoding="utf-8", errors="ignore") as f:
            return f.read()

def analyze_registration(text: str) -> str:
    normalized = re.sub(r"\s+", "", text.lower())
    return "‚úÖ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è" if "–µ–≥–æ–ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏–Ω–∞—É—á–µ—Ç–ø–æ–º–µ—Å—Ç—É–ø—Ä–µ–±—ã–≤–∞–Ω–∏—è" in normalized else "‚ùå —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ñ–∞–ª—å—à–∏–≤–∞—è"

def log_user_action(user_id, username, action, doc_name, result):
    with open(LOG_FILE, "a", newline="", encoding="utf-8") as f:
        csv.writer(f).writerow([time.strftime("%Y-%m-%d %H:%M:%S"), user_id, username, action, doc_name, result])

async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    document = update.message.document
    if not document or document.file_size > 20 * 1024 * 1024:
        await update.message.reply_text("‚ùå –§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–Ω–µ–µ 20 –ú–ë.")
        return CHECK_DOCUMENT

    mime_type, _ = mimetypes.guess_type(document.file_name)
    if not mime_type or not is_supported_file_type(mime_type):
        await update.message.reply_text("‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ PDF.")
        return CHECK_DOCUMENT

    user_id = update.effective_user.id
    file_path = f"first_doc_{user_id}_{document.file_name}"
    await (await document.get_file()).download_to_drive(file_path)

    try:
        text = extract_text(file_path, mime_type)
        analysis = analyze_registration(text)
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
        return CHECK_DOCUMENT

    user_docs[user_id] = {
        "file_path": file_path,
        "file_name": document.file_name,
        "analysis": analysis,
    }

    log_user_action(user_id, update.effective_user.username, "–∑–∞–≥—Ä—É–∑–∏–ª –¥–æ–∫—É–º–µ–Ω—Ç", document.file_name, analysis)
    await update.message.reply_text("–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:"
                                    "1Ô∏è‚É£ –°–æ–≤–µ—Ä—à–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥ 500 —Ä—É–±–ª–µ–π –Ω–∞ –∫–∞—Ä—Ç—É –¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω–∞ –Ω–∞ –±–∞–Ω–∫ ¬´–î—É—à–∞–Ω–±–µ-–°–∏—Ç–∏¬ª.\n"
                                   "–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:\n"
                                   " ‚ñ´Ô∏è –ù–æ–º–µ—Ä –ø–æ–ª—É—á–∞—Ç–µ–ª—è: +992 111 88 1700\n"
                                   "2Ô∏è‚É£ –ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π —á–µ–∫ –≤ —ç—Ç–æ—Ç —á–∞—Ç \n"
                                   "‚ö†Ô∏è –ë–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –º—ã –Ω–µ —Å–º–æ–∂–µ–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å!\n\n")
    return VERIFY_PAYMENT

async def verify_payment_document(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    document = update.message.document
    if not document or document.file_size > 20 * 1024 * 1024:
        await update.message.reply_text("‚ùå –ß–µ–∫ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–¥–æ 20 –ú–ë).")
        return VERIFY_PAYMENT

    file_path = f"payment_doc_{update.effective_user.id}_{document.file_name}"
    await (await document.get_file()).download_to_drive(file_path)

    if not is_new_check(file_path):
        await update.message.reply_text("‚ùå –≠—Ç–æ—Ç —á–µ–∫ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–≥–æ–π!")
        return VERIFY_PAYMENT

    try:
        content = extract_text(file_path, mimetypes.guess_type(file_path)[0])
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —á–µ–∫–∞: {e}")
        return VERIFY_PAYMENT

    os.remove(file_path)
    normalized = re.sub(r"\s+", "", content.lower()).replace("‚ÇΩ", "").replace(",", "").replace(".", "")
    if "500" in normalized and "+992111881700" in normalized:
        info = user_docs.get(update.effective_user.id, {})
        try:
            os.remove(info.get("file_path", ""))
        except:
            pass
        result = info.get("analysis", "‚ùå –ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
        docname = info.get("file_name", "–¥–æ–∫—É–º–µ–Ω—Ç")
        log_user_action(update.effective_user.id, update.effective_user.username, "—á–µ–∫", document.file_name, "–ß–µ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω")

        await update.message.reply_text(
            f"‚úÖ –ß–µ–∫ –ø—Ä–∏–Ω—è—Ç.\nüìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ ¬´{docname}¬ª:\n\n{result}",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥—Ä—É–≥–æ–π –¥–æ–∫—É–º–µ–Ω—Ç", callback_data="check_doc")]])
        )
        return CHOOSING
    else:
        await update.message.reply_text("‚ùå –ß–µ–∫ –Ω–µ –ø—Ä–æ—à—ë–ª –ø—Ä–æ–≤–µ—Ä–∫—É. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —á–µ–∫!")
        return VERIFY_PAYMENT

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–Ω–æ–≤–æ.")
    return ConversationHandler.END

async def admin(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.effective_user.id != OWNER_ID:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∫–µ.")
        return

    keyboard = [
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton("üìÅ –°–∫–∞—á–∞—Ç—å –ª–æ–≥–∏", callback_data="admin_logs")]
    ]
    await update.message.reply_text("üîê –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=InlineKeyboardMarkup(keyboard))

async def admin_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    if update.effective_user.id != OWNER_ID:
        await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    if query.data == "admin_stats":
        if not os.path.exists(LOG_FILE):
            await query.edit_message_text("üìä –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")
            return
        users = set()
        docs = checks = payments = 0
        with open(LOG_FILE, "r", encoding="utf-8") as f:
            for row in csv.reader(f):
                if len(row) < 6: continue
                _, uid, _, action, _, result = row
                users.add(uid)
                if "–¥–æ–∫—É–º–µ–Ω—Ç" in action:
                    docs += 1
                if "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è" in result:
                    checks += 1
                if "—á–µ–∫" in action or "–ß–µ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω" in result:
                    payments += 1
        await query.edit_message_text(
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\nüë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}\nüìÑ –î–æ–∫—É–º–µ–Ω—Ç–æ–≤: {docs}\n‚úÖ –ü—Ä–æ–≤–µ—Ä–æ–∫: {checks}\nüí∏ –ß–µ–∫–æ–≤: {payments}"
        )
    elif query.data == "admin_logs":
        if os.path.exists(LOG_FILE):
            await query.message.reply_document(InputFile(LOG_FILE, filename="logs.csv"))
        else:
            await query.edit_message_text("‚ùå –õ–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

def main() -> None:
    app = Application.builder().token(BOT_TOKEN).build()
    conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            CHOOSING: [
                CallbackQueryHandler(accept_rules, pattern="^accept_rules$"),
                CallbackQueryHandler(choose_check_document, pattern="^check_doc$"),
                CallbackQueryHandler(send_terms_file, pattern="^download_terms$"),
            ],
            CHECK_DOCUMENT: [MessageHandler(filters.Document.ALL, handle_document)],
            VERIFY_PAYMENT: [MessageHandler(filters.Document.ALL, verify_payment_document)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        allow_reentry=True
    )
    app.add_handler(conv)
    app.add_handler(CommandHandler("admin", admin))
    app.add_handler(CallbackQueryHandler(admin_callback, pattern="^admin_"))
    app.run_polling()

if __name__ == "__main__":
    main()
